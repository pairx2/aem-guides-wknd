def agentLabelPrefix = 'AEM65_'
def controlJobBaseName = 'BTS_191_AEM_65/AEM Cloud/aem65-platformcontrol-apps-trigger/'
def controlJobName = controlJobBaseName + java.net.URLEncoder.encode(BRANCH_NAME.replaceAll('^release/cloud', 'release/'), 'UTF-8')

def agentLabel = agentLabelPrefix + getAgentSuffix(env.BRANCH_NAME)
def controlEnvName =java.net.URLEncoder.encode(BRANCH_NAME.replaceAll('^release/', ''), 'UTF-8').toUpperCase()
pipeline {
  agent { label agentLabel }

  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '30', daysToKeepStr: '60'))
  }

  stages {
    stage('Build') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'ARTIFACTORY7_CRED', passwordVariable: 'PASSWORD_VAR', usernameVariable: 'USERNAME_VAR')])
        {
        withMaven(maven: 'Maven-3-6',
          mavenSettingsConfig: 'aem_local_settings',
          mavenLocalRepo: "${env.WORKSPACE}/.m2") {
          sh 'mvn -B -U clean package -Dserver.username=${USERNAME_VAR} -Dserver.password=${PASSWORD_VAR}'
        }
        }
      }
    }

    stage('Deploy Snapshot') {
      when {
        branch 'release/clouddev'
      }
      steps {
        rtMavenResolver (
          id: 'mavenResolver',
          serverId: 'Toolchain-Artifactory-7',
          releaseRepo: 'bts-aem-191-maven-virtual',
          snapshotRepo: 'bts-aem-191-maven-virtual'
        )
        rtMavenDeployer (
          id: 'mavenDeployer',
          serverId: 'Toolchain-Artifactory-7',
          releaseRepo: 'bts-aem-191-releases-maven-local',
          snapshotRepo: 'bts-aem-191-maven-snapshots-local',
        )
        rtMavenRun (
          tool: 'Maven-3-5-3',
          pom: 'pom.xml',
          goals: 'clean install -B -U',
          resolverId: 'mavenResolver',
          deployerId: 'mavenDeployer'
        )
      }
    }
	
    stage('Sonar Code Analysis') {
      when {
        branch 'release/*'
      }
      steps {
        script {
          if (controlEnvName == 'CLOUDSTABLE'){
            echo "Settig sonarqube controlEnvName: STABLE --> STAGE "
            controlEnvName = "CLOUDSTAGE"
          } else {
            echo "Settig sonarqube controlEnvName: ${controlEnvName} "
          }
          if (controlEnvName in ['CLOUDSTAGE','CLOUDDEV', 'CLOUDDEV2', 'CLOUDQA', 'CLOUDQA2', 'CLOUDUAT']){
            echo "Trigarring sonarqube for controlEnvName: ${controlEnvName} "
            scannerHome = tool 'sonarscanner-prod'
            withSonarQubeEnv(credentialsId: 'sonarqube-token', installationName:'SonarQube') {
              sh "${scannerHome}/bin/sonar-scanner \
              -Dsonar.projectKey=191_CLOUD_AEM65-ADC-FREESTYLELIBREDE-APPS_${controlEnvName} \
              -Dsonar.projectName=191_CLOUD_AEM65-ADC-FREESTYLELIBREDE-APPS_${controlEnvName} \
              -Dsonar.projectVersion='1.0' \
              -DsonarRunner.aemVersion='6.6' \
              -Dsonar.coverage.exclusions='all/src/**,ui.*/src/**,**/src/redux/*.js,**/src/__mocks__/**,**/src/less/**,**/src/sass/**,**/src/test/**,**/api/*.js,**/src/**/actions/*.js,**/src/**/reducers/*.js,**/src/**/schemas/*.js,**/src/**/index.js,**/src/**/serviceWorker.js' \
              -Dsonar.exclusions='**/src/less/**, .**/src/sass/**' \
              -Dsonar.sources='./core/src,./react.app/src,./ui.apps/src,./ui.config/src,./ui.content/src,./all/src' \
              -Dsonar.tests='./core/src,./react.app/src' \
              -Dsonar.java.binaries='./core/target/classes' \
              -Dsonar.java.libraries='**/target/**' \
              -Dsonar.test.inclusions='**/src/test/**,**/*.test.js' \
              -Dsonar.javascript.file.suffixes='.js,.jsx' \
              -Dsonar.javascript.lcov.reportPaths='./react.app/coverage/lcov.info' \
              -Dsonar.coverage.jacoco.xmlReportPaths='./core/target/site/jacoco/jacoco.xml'\
              -Dsonar.dynamicAnalysis='reuseReports' \
              -Dsonar.java.coveragePlugin='jacoco' \
              -Dsonar.sourceEncoding='UTF-8'\
              -Dsonar.scm.disabled=True"
            }
          }
        }
      }
    }

    stage('Trigger Control Build') {
      when {
        branch 'release/cloud*'
      }
      steps {
        build(job: controlJobName, propagate: false, wait: false)
      }
    }
  }
  
  post {
    cleanup {
      cleanWs() /* clean up our workspace */
    }
  }
}

String getAgentSuffix(branch) {
  def branchParts = branch.split('/')

  if (branchParts.length < 2) {
    if (branchParts[0] == 'master') {
      return 'PROD'
    }
    return 'DEV'
  }

  if (branchParts[branchParts.length - 2] == 'release') {
    if (branchParts[branchParts.length - 1].startsWith('qa')) {
      return 'QA'
    } else if (branchParts[branchParts.length - 1].startsWith('stable')) {
      return 'STAGE'
    }
  } else if (branchParts[branchParts.length - 2] == 'master' || branchParts[branchParts.length - 1] == 'master') {
    return 'PROD'
  }

  return 'DEV'

}
